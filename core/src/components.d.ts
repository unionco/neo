/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  CheckboxChangeEventDetail,
  Color,
  InputChangeEventDetail,
  RadioChangeEventDetail,
  RadioGroupChangeEventDetail,
  StyleEventDetail,
  TextareaChangeEventDetail,
  TextFieldTypes,
} from './interface';

export namespace Components {
  interface NeoAccordion {
    /**
    * Closes open items when others are opened.
    */
    'closeOthers': boolean;
    /**
    * Opens the first accordion item on load
    */
    'openFirst': boolean;
  }
  interface NeoAccordionItem {
    'toggle': () => Promise<void>;
  }
  interface NeoApp {}
  interface NeoButton {
    /**
    * The type of button.
    */
    'buttonType': string;
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * If `true`, the user cannot interact with the button.
    */
    'disabled': boolean;
    /**
    * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
    */
    'download': string | undefined;
    /**
    * Set to `"block"` for a full-width button or to `"full"` for a full-width button without left and right borders.
    */
    'expand'?: 'full' | 'block';
    /**
    * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"` except inside of a toolbar, where the default is `"clear"`.
    */
    'fill'?: 'clear' | 'outline' | 'solid' | 'default';
    /**
    * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
    */
    'href': string | undefined;
    /**
    * The mode determines which platform styles to use.
    */
    'mode'?: "ios" | "md";
    /**
    * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
    */
    'rel': string | undefined;
    /**
    * The button shape.
    */
    'shape'?: 'round';
    /**
    * The button size.
    */
    'size'?: 'small' | 'default' | 'large';
    /**
    * If `true`, activates a button with a heavier font weight.
    */
    'strong': boolean;
    /**
    * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
    */
    'target': string | undefined;
    /**
    * The type of the button.
    */
    'type': 'submit' | 'reset' | 'button';
  }
  interface NeoButtons {
    /**
    * The first name
    */
    'layout': 'row' | 'col';
  }
  interface NeoCard {
    /**
    * Layout of container (flex) row or column
    */
    'layout': 'col' | 'row';
    /**
    * Background image or video
    */
    'mediabehind': 'default'|'tall';
  }
  interface NeoCardContent {}
  interface NeoCardHeader {
    /**
    * The first name
    */
    'prop': string;
  }
  interface NeoCheckbox {
    /**
    * If `true`, the checkbox is selected.
    */
    'checked': boolean;
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * If `true`, the user cannot interact with the checkbox.
    */
    'disabled': boolean;
    /**
    * If `true`, the checkbox will visually appear as indeterminate.
    */
    'indeterminate': boolean;
    /**
    * The mode determines which platform styles to use.
    */
    'mode'?: "ios" | "md";
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name': string;
    /**
    * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
    */
    'value': string;
  }
  interface NeoChip {
    /**
    * Addes activatable class and adds hover states
    */
    'clickable': boolean;
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * Display an outline style button.
    */
    'outline': boolean;
  }
  interface NeoCol {
    /**
    * The amount to offset the column, in terms of how many columns it should shift to the end of the total available.
    */
    'offset'?: string;
    /**
    * The amount to offset the column for lg screens, in terms of how many columns it should shift to the end of the total available.
    */
    'offsetLg'?: string;
    /**
    * The amount to offset the column for md screens, in terms of how many columns it should shift to the end of the total available.
    */
    'offsetMd'?: string;
    /**
    * The amount to offset the column for sm screens, in terms of how many columns it should shift to the end of the total available.
    */
    'offsetSm'?: string;
    /**
    * The amount to offset the column for xl screens, in terms of how many columns it should shift to the end of the total available.
    */
    'offsetXl'?: string;
    /**
    * The amount to offset the column for xs screens, in terms of how many columns it should shift to the end of the total available.
    */
    'offsetXs'?: string;
    /**
    * The amount to pull the column, in terms of how many columns it should shift to the start of the total available.
    */
    'pull'?: string;
    /**
    * The amount to pull the column for lg screens, in terms of how many columns it should shift to the start of the total available.
    */
    'pullLg'?: string;
    /**
    * The amount to pull the column for md screens, in terms of how many columns it should shift to the start of the total available.
    */
    'pullMd'?: string;
    /**
    * The amount to pull the column for sm screens, in terms of how many columns it should shift to the start of the total available.
    */
    'pullSm'?: string;
    /**
    * The amount to pull the column for xl screens, in terms of how many columns it should shift to the start of the total available.
    */
    'pullXl'?: string;
    /**
    * The amount to pull the column for xs screens, in terms of how many columns it should shift to the start of the total available.
    */
    'pullXs'?: string;
    /**
    * The amount to push the column, in terms of how many columns it should shift to the end of the total available.
    */
    'push'?: string;
    /**
    * The amount to push the column for lg screens, in terms of how many columns it should shift to the end of the total available.
    */
    'pushLg'?: string;
    /**
    * The amount to push the column for md screens, in terms of how many columns it should shift to the end of the total available.
    */
    'pushMd'?: string;
    /**
    * The amount to push the column for sm screens, in terms of how many columns it should shift to the end of the total available.
    */
    'pushSm'?: string;
    /**
    * The amount to push the column for xl screens, in terms of how many columns it should shift to the end of the total available.
    */
    'pushXl'?: string;
    /**
    * The amount to push the column for xs screens, in terms of how many columns it should shift to the end of the total available.
    */
    'pushXs'?: string;
    /**
    * The size of the column, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
    */
    'size'?: string;
    /**
    * The size of the column for lg screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
    */
    'sizeLg'?: string;
    /**
    * The size of the column for md screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
    */
    'sizeMd'?: string;
    /**
    * The size of the column for sm screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
    */
    'sizeSm'?: string;
    /**
    * The size of the column for xl screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
    */
    'sizeXl'?: string;
    /**
    * The size of the column for xs screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
    */
    'sizeXs'?: string;
  }
  interface NeoCopy {
    /**
    * The first name
    */
    'prop': string;
  }
  interface NeoEyebrow {
    /**
    * The first name
    */
    'upper': boolean;
  }
  interface NeoFormGroup {
    /**
    * If `true`, a button tag will be rendered and the item will be tappable.
    */
    'button': boolean;
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * If `true`, the user cannot interact with the item.
    */
    'disabled': boolean;
    /**
    * The type of the button. Only used when an `onclick` or `button` property is present.
    */
    'type': 'submit' | 'reset' | 'button';
  }
  interface NeoGallery {}
  interface NeoGalleryItem {}
  interface NeoGrid {
    /**
    * If `true`, the grid will have a fixed width based on the screen size.
    */
    'fixed': boolean;
  }
  interface NeoHeading {
    /**
    * Size of the tag, h1, h2, h3, etc
    */
    'size': number;
  }
  interface NeoImg {
    /**
    * This attribute defines the alternative text describing the image. Users will see this text displayed if the image URL is wrong, the image is not in one of the supported formats, or if the image is not yet downloaded.
    */
    'alt'?: string;
    /**
    * The image URL. This attribute is mandatory for the `<img>` element.
    */
    'src'?: string;
  }
  interface NeoInput {
    /**
    * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
    */
    'accept'?: string;
    /**
    * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
    */
    'autocapitalize': string;
    /**
    * Indicates whether the value of the control can be automatically completed by the browser.
    */
    'autocomplete': 'on' | 'off';
    /**
    * Whether auto correction should be enabled when the user is entering/editing the text value.
    */
    'autocorrect': 'on' | 'off';
    /**
    * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
    */
    'autofocus': boolean;
    /**
    * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
    */
    'clearInput': boolean;
    /**
    * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
    */
    'clearOnEdit'?: boolean;
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * Set the amount of time, in milliseconds, to wait to trigger the `neoChange` event after each keystroke.
    */
    'debounce': number;
    /**
    * If `true`, the user cannot interact with the input.
    */
    'disabled': boolean;
    /**
    * Returns the native `<input>` element used under the hood.
    */
    'getInputElement': () => Promise<HTMLInputElement>;
    /**
    * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
    */
    'inputmode'?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
    /**
    * The maximum value, which must not be less than its minimum (min attribute) value.
    */
    'max'?: string;
    /**
    * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
    */
    'maxlength'?: number;
    /**
    * The minimum value, which must not be greater than its maximum (max attribute) value.
    */
    'min'?: string;
    /**
    * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
    */
    'minlength'?: number;
    /**
    * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
    */
    'multiple'?: boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name': string;
    /**
    * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
    */
    'pattern'?: string;
    /**
    * Instructional text that shows before the input has a value.
    */
    'placeholder'?: string | null;
    /**
    * If `true`, the user cannot modify the value.
    */
    'readonly': boolean;
    /**
    * If `true`, the user must fill in a value before submitting a form.
    */
    'required': boolean;
    /**
    * Sets focus on the specified `neo-input`. Use this method instead of the global `input.focus()`.
    */
    'setFocus': () => Promise<void>;
    /**
    * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
    */
    'size'?: number;
    /**
    * If `true`, the element will have its spelling and grammar checked.
    */
    'spellcheck': boolean;
    /**
    * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
    */
    'step'?: string;
    /**
    * The type of control to display. The default type is text.
    */
    'type': TextFieldTypes;
    /**
    * The value of the input.
    */
    'value'?: string | null;
  }
  interface NeoLabel {
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * The position determines where and how the label behaves inside an item.
    */
    'position'?: 'fixed' | 'stacked' | 'floating';
  }
  interface NeoLinkList {}
  interface NeoLinkListItem {
    'hover': boolean;
    'href': string;
  }
  interface NeoMasonry {}
  interface NeoMasonryItem {}
  interface NeoProfile {
    /**
    * Layout of container (flex) row or column
    */
    'layout': 'col' | 'row';
    /**
    * Rounds the avatar image is provided.
    */
    'rounded': boolean;
  }
  interface NeoRadio {
    /**
    * If `true`, the radio is selected.
    */
    'checked': boolean;
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * If `true`, the user cannot interact with the radio.
    */
    'disabled': boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name': string;
    /**
    * the value of the radio.
    */
    'value'?: any | null;
  }
  interface NeoRadioGroup {
    /**
    * If `true`, the radios can be deselected.
    */
    'allowEmptySelection': boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name': string;
    /**
    * the value of the radio group.
    */
    'value'?: any | null;
  }
  interface NeoRow {}
  interface NeoSlide {}
  interface NeoSlides {
    'buttons': boolean;
    /**
    * Get the Swiper instance. Use this to access the full Swiper API. See https://idangero.us/swiper/api/ for all API options.
    */
    'getSwiper': () => Promise<any>;
    'options': any;
    'opts': any;
    'pager': boolean;
    'scrollbar': boolean;
    /**
    * Update the underlying slider implementation. Call this if you've added or removed child slides.
    */
    'update': () => Promise<void>;
  }
  interface NeoTab {
    /**
    * Status of the tab
    */
    'active': boolean;
    /**
    * Should be activatble
    */
    'disabled': boolean;
    /**
    * Set the active component for the tab
    */
    'setActive': () => Promise<void>;
    /**
    * Label used for the tab button title
    */
    'tab': string;
  }
  interface NeoTabBar {
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * The selected tab component
    */
    'selectedTab'?: string;
  }
  interface NeoTabButton {
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * If `true`, the user cannot interact with the tab button.
    */
    'disabled': boolean;
    /**
    * The selected tab component
    */
    'selected': boolean;
    /**
    * A tab id must be provided for each `neo-tab`.
    */
    'tab'?: string;
  }
  interface NeoTabs {
    /**
    * Select a tab by the value of its `tab` property or an element reference.
    * @param tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property.
    */
    'select': (tab: string | HTMLNeoTabElement) => Promise<boolean>;
  }
  interface NeoTextarea {
    /**
    * If `true`, the element height will increase based on the value.
    */
    'autoGrow': boolean;
    /**
    * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
    */
    'autocapitalize': string;
    /**
    * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
    */
    'autofocus': boolean;
    /**
    * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
    */
    'clearOnEdit': boolean;
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
    */
    'cols'?: number;
    /**
    * Set the amount of time, in milliseconds, to wait to trigger the `neoChange` event after each keystroke.
    */
    'debounce': number;
    /**
    * If `true`, the user cannot interact with the textarea.
    */
    'disabled': boolean;
    /**
    * Returns the native `<textarea>` element used under the hood.
    */
    'getInputElement': () => Promise<HTMLTextAreaElement>;
    /**
    * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
    */
    'maxlength'?: number;
    /**
    * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
    */
    'minlength'?: number;
    /**
    * The mode determines which platform styles to use.
    */
    'mode'?: "ios" | "md";
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name': string;
    /**
    * Instructional text that shows before the input has a value.
    */
    'placeholder'?: string | null;
    /**
    * If `true`, the user cannot modify the value.
    */
    'readonly': boolean;
    /**
    * If `true`, the user must fill in a value before submitting a form.
    */
    'required': boolean;
    /**
    * If `true`, the element will be resizeable.
    */
    'resize': boolean;
    /**
    * The number of visible text lines for the control.
    */
    'rows'?: number;
    /**
    * Sets focus on the specified `neo-textarea`. Use this method instead of the global `input.focus()`.
    */
    'setFocus': () => Promise<void>;
    /**
    * If `true`, the element will have its spelling and grammar checked.
    */
    'spellcheck': boolean;
    /**
    * The value of the textarea.
    */
    'value'?: string | null;
    /**
    * Indicates how the control wraps text.
    */
    'wrap'?: 'hard' | 'soft' | 'off';
  }
  interface NeoVideo {
    /**
    * Show custom controls, this is not ready yet. Use native controls
    */
    'controls'?: boolean;
    /**
    * The poster image url
    */
    'poster'?: string;
    /**
    * The video URL.
    */
    'src'?: string;
  }
  interface NeoWysiwyg {
    /**
    * The first name
    */
    'base': number;
  }
  interface ScrubBar {
    'duration': number;
    'progress': number;
  }
}

declare global {


  interface HTMLNeoAccordionElement extends Components.NeoAccordion, HTMLStencilElement {}
  var HTMLNeoAccordionElement: {
    prototype: HTMLNeoAccordionElement;
    new (): HTMLNeoAccordionElement;
  };

  interface HTMLNeoAccordionItemElement extends Components.NeoAccordionItem, HTMLStencilElement {}
  var HTMLNeoAccordionItemElement: {
    prototype: HTMLNeoAccordionItemElement;
    new (): HTMLNeoAccordionItemElement;
  };

  interface HTMLNeoAppElement extends Components.NeoApp, HTMLStencilElement {}
  var HTMLNeoAppElement: {
    prototype: HTMLNeoAppElement;
    new (): HTMLNeoAppElement;
  };

  interface HTMLNeoButtonElement extends Components.NeoButton, HTMLStencilElement {}
  var HTMLNeoButtonElement: {
    prototype: HTMLNeoButtonElement;
    new (): HTMLNeoButtonElement;
  };

  interface HTMLNeoButtonsElement extends Components.NeoButtons, HTMLStencilElement {}
  var HTMLNeoButtonsElement: {
    prototype: HTMLNeoButtonsElement;
    new (): HTMLNeoButtonsElement;
  };

  interface HTMLNeoCardElement extends Components.NeoCard, HTMLStencilElement {}
  var HTMLNeoCardElement: {
    prototype: HTMLNeoCardElement;
    new (): HTMLNeoCardElement;
  };

  interface HTMLNeoCardContentElement extends Components.NeoCardContent, HTMLStencilElement {}
  var HTMLNeoCardContentElement: {
    prototype: HTMLNeoCardContentElement;
    new (): HTMLNeoCardContentElement;
  };

  interface HTMLNeoCardHeaderElement extends Components.NeoCardHeader, HTMLStencilElement {}
  var HTMLNeoCardHeaderElement: {
    prototype: HTMLNeoCardHeaderElement;
    new (): HTMLNeoCardHeaderElement;
  };

  interface HTMLNeoCheckboxElement extends Components.NeoCheckbox, HTMLStencilElement {}
  var HTMLNeoCheckboxElement: {
    prototype: HTMLNeoCheckboxElement;
    new (): HTMLNeoCheckboxElement;
  };

  interface HTMLNeoChipElement extends Components.NeoChip, HTMLStencilElement {}
  var HTMLNeoChipElement: {
    prototype: HTMLNeoChipElement;
    new (): HTMLNeoChipElement;
  };

  interface HTMLNeoColElement extends Components.NeoCol, HTMLStencilElement {}
  var HTMLNeoColElement: {
    prototype: HTMLNeoColElement;
    new (): HTMLNeoColElement;
  };

  interface HTMLNeoCopyElement extends Components.NeoCopy, HTMLStencilElement {}
  var HTMLNeoCopyElement: {
    prototype: HTMLNeoCopyElement;
    new (): HTMLNeoCopyElement;
  };

  interface HTMLNeoEyebrowElement extends Components.NeoEyebrow, HTMLStencilElement {}
  var HTMLNeoEyebrowElement: {
    prototype: HTMLNeoEyebrowElement;
    new (): HTMLNeoEyebrowElement;
  };

  interface HTMLNeoFormGroupElement extends Components.NeoFormGroup, HTMLStencilElement {}
  var HTMLNeoFormGroupElement: {
    prototype: HTMLNeoFormGroupElement;
    new (): HTMLNeoFormGroupElement;
  };

  interface HTMLNeoGalleryElement extends Components.NeoGallery, HTMLStencilElement {}
  var HTMLNeoGalleryElement: {
    prototype: HTMLNeoGalleryElement;
    new (): HTMLNeoGalleryElement;
  };

  interface HTMLNeoGalleryItemElement extends Components.NeoGalleryItem, HTMLStencilElement {}
  var HTMLNeoGalleryItemElement: {
    prototype: HTMLNeoGalleryItemElement;
    new (): HTMLNeoGalleryItemElement;
  };

  interface HTMLNeoGridElement extends Components.NeoGrid, HTMLStencilElement {}
  var HTMLNeoGridElement: {
    prototype: HTMLNeoGridElement;
    new (): HTMLNeoGridElement;
  };

  interface HTMLNeoHeadingElement extends Components.NeoHeading, HTMLStencilElement {}
  var HTMLNeoHeadingElement: {
    prototype: HTMLNeoHeadingElement;
    new (): HTMLNeoHeadingElement;
  };

  interface HTMLNeoImgElement extends Components.NeoImg, HTMLStencilElement {}
  var HTMLNeoImgElement: {
    prototype: HTMLNeoImgElement;
    new (): HTMLNeoImgElement;
  };

  interface HTMLNeoInputElement extends Components.NeoInput, HTMLStencilElement {}
  var HTMLNeoInputElement: {
    prototype: HTMLNeoInputElement;
    new (): HTMLNeoInputElement;
  };

  interface HTMLNeoLabelElement extends Components.NeoLabel, HTMLStencilElement {}
  var HTMLNeoLabelElement: {
    prototype: HTMLNeoLabelElement;
    new (): HTMLNeoLabelElement;
  };

  interface HTMLNeoLinkListElement extends Components.NeoLinkList, HTMLStencilElement {}
  var HTMLNeoLinkListElement: {
    prototype: HTMLNeoLinkListElement;
    new (): HTMLNeoLinkListElement;
  };

  interface HTMLNeoLinkListItemElement extends Components.NeoLinkListItem, HTMLStencilElement {}
  var HTMLNeoLinkListItemElement: {
    prototype: HTMLNeoLinkListItemElement;
    new (): HTMLNeoLinkListItemElement;
  };

  interface HTMLNeoMasonryElement extends Components.NeoMasonry, HTMLStencilElement {}
  var HTMLNeoMasonryElement: {
    prototype: HTMLNeoMasonryElement;
    new (): HTMLNeoMasonryElement;
  };

  interface HTMLNeoMasonryItemElement extends Components.NeoMasonryItem, HTMLStencilElement {}
  var HTMLNeoMasonryItemElement: {
    prototype: HTMLNeoMasonryItemElement;
    new (): HTMLNeoMasonryItemElement;
  };

  interface HTMLNeoProfileElement extends Components.NeoProfile, HTMLStencilElement {}
  var HTMLNeoProfileElement: {
    prototype: HTMLNeoProfileElement;
    new (): HTMLNeoProfileElement;
  };

  interface HTMLNeoRadioElement extends Components.NeoRadio, HTMLStencilElement {}
  var HTMLNeoRadioElement: {
    prototype: HTMLNeoRadioElement;
    new (): HTMLNeoRadioElement;
  };

  interface HTMLNeoRadioGroupElement extends Components.NeoRadioGroup, HTMLStencilElement {}
  var HTMLNeoRadioGroupElement: {
    prototype: HTMLNeoRadioGroupElement;
    new (): HTMLNeoRadioGroupElement;
  };

  interface HTMLNeoRowElement extends Components.NeoRow, HTMLStencilElement {}
  var HTMLNeoRowElement: {
    prototype: HTMLNeoRowElement;
    new (): HTMLNeoRowElement;
  };

  interface HTMLNeoSlideElement extends Components.NeoSlide, HTMLStencilElement {}
  var HTMLNeoSlideElement: {
    prototype: HTMLNeoSlideElement;
    new (): HTMLNeoSlideElement;
  };

  interface HTMLNeoSlidesElement extends Components.NeoSlides, HTMLStencilElement {}
  var HTMLNeoSlidesElement: {
    prototype: HTMLNeoSlidesElement;
    new (): HTMLNeoSlidesElement;
  };

  interface HTMLNeoTabElement extends Components.NeoTab, HTMLStencilElement {}
  var HTMLNeoTabElement: {
    prototype: HTMLNeoTabElement;
    new (): HTMLNeoTabElement;
  };

  interface HTMLNeoTabBarElement extends Components.NeoTabBar, HTMLStencilElement {}
  var HTMLNeoTabBarElement: {
    prototype: HTMLNeoTabBarElement;
    new (): HTMLNeoTabBarElement;
  };

  interface HTMLNeoTabButtonElement extends Components.NeoTabButton, HTMLStencilElement {}
  var HTMLNeoTabButtonElement: {
    prototype: HTMLNeoTabButtonElement;
    new (): HTMLNeoTabButtonElement;
  };

  interface HTMLNeoTabsElement extends Components.NeoTabs, HTMLStencilElement {}
  var HTMLNeoTabsElement: {
    prototype: HTMLNeoTabsElement;
    new (): HTMLNeoTabsElement;
  };

  interface HTMLNeoTextareaElement extends Components.NeoTextarea, HTMLStencilElement {}
  var HTMLNeoTextareaElement: {
    prototype: HTMLNeoTextareaElement;
    new (): HTMLNeoTextareaElement;
  };

  interface HTMLNeoVideoElement extends Components.NeoVideo, HTMLStencilElement {}
  var HTMLNeoVideoElement: {
    prototype: HTMLNeoVideoElement;
    new (): HTMLNeoVideoElement;
  };

  interface HTMLNeoWysiwygElement extends Components.NeoWysiwyg, HTMLStencilElement {}
  var HTMLNeoWysiwygElement: {
    prototype: HTMLNeoWysiwygElement;
    new (): HTMLNeoWysiwygElement;
  };

  interface HTMLScrubBarElement extends Components.ScrubBar, HTMLStencilElement {}
  var HTMLScrubBarElement: {
    prototype: HTMLScrubBarElement;
    new (): HTMLScrubBarElement;
  };
  interface HTMLElementTagNameMap {
    'neo-accordion': HTMLNeoAccordionElement;
    'neo-accordion-item': HTMLNeoAccordionItemElement;
    'neo-app': HTMLNeoAppElement;
    'neo-button': HTMLNeoButtonElement;
    'neo-buttons': HTMLNeoButtonsElement;
    'neo-card': HTMLNeoCardElement;
    'neo-card-content': HTMLNeoCardContentElement;
    'neo-card-header': HTMLNeoCardHeaderElement;
    'neo-checkbox': HTMLNeoCheckboxElement;
    'neo-chip': HTMLNeoChipElement;
    'neo-col': HTMLNeoColElement;
    'neo-copy': HTMLNeoCopyElement;
    'neo-eyebrow': HTMLNeoEyebrowElement;
    'neo-form-group': HTMLNeoFormGroupElement;
    'neo-gallery': HTMLNeoGalleryElement;
    'neo-gallery-item': HTMLNeoGalleryItemElement;
    'neo-grid': HTMLNeoGridElement;
    'neo-heading': HTMLNeoHeadingElement;
    'neo-img': HTMLNeoImgElement;
    'neo-input': HTMLNeoInputElement;
    'neo-label': HTMLNeoLabelElement;
    'neo-link-list': HTMLNeoLinkListElement;
    'neo-link-list-item': HTMLNeoLinkListItemElement;
    'neo-masonry': HTMLNeoMasonryElement;
    'neo-masonry-item': HTMLNeoMasonryItemElement;
    'neo-profile': HTMLNeoProfileElement;
    'neo-radio': HTMLNeoRadioElement;
    'neo-radio-group': HTMLNeoRadioGroupElement;
    'neo-row': HTMLNeoRowElement;
    'neo-slide': HTMLNeoSlideElement;
    'neo-slides': HTMLNeoSlidesElement;
    'neo-tab': HTMLNeoTabElement;
    'neo-tab-bar': HTMLNeoTabBarElement;
    'neo-tab-button': HTMLNeoTabButtonElement;
    'neo-tabs': HTMLNeoTabsElement;
    'neo-textarea': HTMLNeoTextareaElement;
    'neo-video': HTMLNeoVideoElement;
    'neo-wysiwyg': HTMLNeoWysiwygElement;
    'scrub-bar': HTMLScrubBarElement;
  }
}

declare namespace LocalJSX {
  interface NeoAccordion {
    /**
    * Closes open items when others are opened.
    */
    'closeOthers'?: boolean;
    /**
    * Opens the first accordion item on load
    */
    'openFirst'?: boolean;
  }
  interface NeoAccordionItem {
    /**
    * Emitted only when item is closed
    */
    'onItemClose'?: (event: CustomEvent<{ item: HTMLElement }>) => void;
    /**
    * Emitted only when item is opened
    */
    'onItemOpen'?: (event: CustomEvent<{ item: HTMLElement }>) => void;
  }
  interface NeoApp {}
  interface NeoButton {
    /**
    * The type of button.
    */
    'buttonType'?: string;
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * If `true`, the user cannot interact with the button.
    */
    'disabled'?: boolean;
    /**
    * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
    */
    'download'?: string | undefined;
    /**
    * Set to `"block"` for a full-width button or to `"full"` for a full-width button without left and right borders.
    */
    'expand'?: 'full' | 'block';
    /**
    * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"` except inside of a toolbar, where the default is `"clear"`.
    */
    'fill'?: 'clear' | 'outline' | 'solid' | 'default';
    /**
    * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
    */
    'href'?: string | undefined;
    /**
    * The mode determines which platform styles to use.
    */
    'mode'?: "ios" | "md";
    /**
    * Emitted when the button loses focus.
    */
    'onNeoBlur'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the button has focus.
    */
    'onNeoFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
    */
    'rel'?: string | undefined;
    /**
    * The button shape.
    */
    'shape'?: 'round';
    /**
    * The button size.
    */
    'size'?: 'small' | 'default' | 'large';
    /**
    * If `true`, activates a button with a heavier font weight.
    */
    'strong'?: boolean;
    /**
    * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
    */
    'target'?: string | undefined;
    /**
    * The type of the button.
    */
    'type'?: 'submit' | 'reset' | 'button';
  }
  interface NeoButtons {
    /**
    * The first name
    */
    'layout'?: 'row' | 'col';
  }
  interface NeoCard {
    /**
    * Layout of container (flex) row or column
    */
    'layout'?: 'col' | 'row';
    /**
    * Background image or video
    */
    'mediabehind'?: 'default'|'tall';
  }
  interface NeoCardContent {}
  interface NeoCardHeader {
    /**
    * The first name
    */
    'prop'?: string;
  }
  interface NeoCheckbox {
    /**
    * If `true`, the checkbox is selected.
    */
    'checked'?: boolean;
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * If `true`, the user cannot interact with the checkbox.
    */
    'disabled'?: boolean;
    /**
    * If `true`, the checkbox will visually appear as indeterminate.
    */
    'indeterminate'?: boolean;
    /**
    * The mode determines which platform styles to use.
    */
    'mode'?: "ios" | "md";
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name'?: string;
    /**
    * Emitted when the toggle loses focus.
    */
    'onNeoBlur'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the checked property has changed.
    */
    'onNeoChange'?: (event: CustomEvent<CheckboxChangeEventDetail>) => void;
    /**
    * Emitted when the toggle has focus.
    */
    'onNeoFocus'?: (event: CustomEvent<void>) => void;
    /**
    * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
    */
    'value'?: string;
  }
  interface NeoChip {
    /**
    * Addes activatable class and adds hover states
    */
    'clickable'?: boolean;
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * Display an outline style button.
    */
    'outline'?: boolean;
  }
  interface NeoCol {
    /**
    * The amount to offset the column, in terms of how many columns it should shift to the end of the total available.
    */
    'offset'?: string;
    /**
    * The amount to offset the column for lg screens, in terms of how many columns it should shift to the end of the total available.
    */
    'offsetLg'?: string;
    /**
    * The amount to offset the column for md screens, in terms of how many columns it should shift to the end of the total available.
    */
    'offsetMd'?: string;
    /**
    * The amount to offset the column for sm screens, in terms of how many columns it should shift to the end of the total available.
    */
    'offsetSm'?: string;
    /**
    * The amount to offset the column for xl screens, in terms of how many columns it should shift to the end of the total available.
    */
    'offsetXl'?: string;
    /**
    * The amount to offset the column for xs screens, in terms of how many columns it should shift to the end of the total available.
    */
    'offsetXs'?: string;
    /**
    * The amount to pull the column, in terms of how many columns it should shift to the start of the total available.
    */
    'pull'?: string;
    /**
    * The amount to pull the column for lg screens, in terms of how many columns it should shift to the start of the total available.
    */
    'pullLg'?: string;
    /**
    * The amount to pull the column for md screens, in terms of how many columns it should shift to the start of the total available.
    */
    'pullMd'?: string;
    /**
    * The amount to pull the column for sm screens, in terms of how many columns it should shift to the start of the total available.
    */
    'pullSm'?: string;
    /**
    * The amount to pull the column for xl screens, in terms of how many columns it should shift to the start of the total available.
    */
    'pullXl'?: string;
    /**
    * The amount to pull the column for xs screens, in terms of how many columns it should shift to the start of the total available.
    */
    'pullXs'?: string;
    /**
    * The amount to push the column, in terms of how many columns it should shift to the end of the total available.
    */
    'push'?: string;
    /**
    * The amount to push the column for lg screens, in terms of how many columns it should shift to the end of the total available.
    */
    'pushLg'?: string;
    /**
    * The amount to push the column for md screens, in terms of how many columns it should shift to the end of the total available.
    */
    'pushMd'?: string;
    /**
    * The amount to push the column for sm screens, in terms of how many columns it should shift to the end of the total available.
    */
    'pushSm'?: string;
    /**
    * The amount to push the column for xl screens, in terms of how many columns it should shift to the end of the total available.
    */
    'pushXl'?: string;
    /**
    * The amount to push the column for xs screens, in terms of how many columns it should shift to the end of the total available.
    */
    'pushXs'?: string;
    /**
    * The size of the column, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
    */
    'size'?: string;
    /**
    * The size of the column for lg screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
    */
    'sizeLg'?: string;
    /**
    * The size of the column for md screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
    */
    'sizeMd'?: string;
    /**
    * The size of the column for sm screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
    */
    'sizeSm'?: string;
    /**
    * The size of the column for xl screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
    */
    'sizeXl'?: string;
    /**
    * The size of the column for xs screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
    */
    'sizeXs'?: string;
  }
  interface NeoCopy {
    /**
    * The first name
    */
    'prop'?: string;
  }
  interface NeoEyebrow {
    /**
    * The first name
    */
    'upper'?: boolean;
  }
  interface NeoFormGroup {
    /**
    * If `true`, a button tag will be rendered and the item will be tappable.
    */
    'button'?: boolean;
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * If `true`, the user cannot interact with the item.
    */
    'disabled'?: boolean;
    /**
    * The type of the button. Only used when an `onclick` or `button` property is present.
    */
    'type'?: 'submit' | 'reset' | 'button';
  }
  interface NeoGallery {}
  interface NeoGalleryItem {}
  interface NeoGrid {
    /**
    * If `true`, the grid will have a fixed width based on the screen size.
    */
    'fixed'?: boolean;
  }
  interface NeoHeading {
    /**
    * Size of the tag, h1, h2, h3, etc
    */
    'size'?: number;
  }
  interface NeoImg {
    /**
    * This attribute defines the alternative text describing the image. Users will see this text displayed if the image URL is wrong, the image is not in one of the supported formats, or if the image is not yet downloaded.
    */
    'alt'?: string;
    /**
    * Emitted when the img fails to load
    */
    'onNeoError'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the image has finished loading
    */
    'onNeoImgDidLoad'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the img src has been set
    */
    'onNeoImgWillLoad'?: (event: CustomEvent<void>) => void;
    /**
    * The image URL. This attribute is mandatory for the `<img>` element.
    */
    'src'?: string;
  }
  interface NeoInput {
    /**
    * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
    */
    'accept'?: string;
    /**
    * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
    */
    'autocapitalize'?: string;
    /**
    * Indicates whether the value of the control can be automatically completed by the browser.
    */
    'autocomplete'?: 'on' | 'off';
    /**
    * Whether auto correction should be enabled when the user is entering/editing the text value.
    */
    'autocorrect'?: 'on' | 'off';
    /**
    * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
    */
    'autofocus'?: boolean;
    /**
    * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
    */
    'clearInput'?: boolean;
    /**
    * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
    */
    'clearOnEdit'?: boolean;
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * Set the amount of time, in milliseconds, to wait to trigger the `neoChange` event after each keystroke.
    */
    'debounce'?: number;
    /**
    * If `true`, the user cannot interact with the input.
    */
    'disabled'?: boolean;
    /**
    * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
    */
    'inputmode'?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
    /**
    * The maximum value, which must not be less than its minimum (min attribute) value.
    */
    'max'?: string;
    /**
    * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
    */
    'maxlength'?: number;
    /**
    * The minimum value, which must not be greater than its maximum (max attribute) value.
    */
    'min'?: string;
    /**
    * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
    */
    'minlength'?: number;
    /**
    * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
    */
    'multiple'?: boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name'?: string;
    /**
    * Emitted when the input loses focus.
    */
    'onNeoBlur'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the value has changed.
    */
    'onNeoChange'?: (event: CustomEvent<InputChangeEventDetail>) => void;
    /**
    * Emitted when the input has focus.
    */
    'onNeoFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when a keyboard input occurred.
    */
    'onNeoInput'?: (event: CustomEvent<KeyboardEvent>) => void;
    /**
    * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
    */
    'pattern'?: string;
    /**
    * Instructional text that shows before the input has a value.
    */
    'placeholder'?: string | null;
    /**
    * If `true`, the user cannot modify the value.
    */
    'readonly'?: boolean;
    /**
    * If `true`, the user must fill in a value before submitting a form.
    */
    'required'?: boolean;
    /**
    * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
    */
    'size'?: number;
    /**
    * If `true`, the element will have its spelling and grammar checked.
    */
    'spellcheck'?: boolean;
    /**
    * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
    */
    'step'?: string;
    /**
    * The type of control to display. The default type is text.
    */
    'type'?: TextFieldTypes;
    /**
    * The value of the input.
    */
    'value'?: string | null;
  }
  interface NeoLabel {
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * The position determines where and how the label behaves inside an item.
    */
    'position'?: 'fixed' | 'stacked' | 'floating';
  }
  interface NeoLinkList {}
  interface NeoLinkListItem {
    'hover'?: boolean;
    'href'?: string;
  }
  interface NeoMasonry {}
  interface NeoMasonryItem {}
  interface NeoProfile {
    /**
    * Layout of container (flex) row or column
    */
    'layout'?: 'col' | 'row';
    /**
    * Rounds the avatar image is provided.
    */
    'rounded'?: boolean;
  }
  interface NeoRadio {
    /**
    * If `true`, the radio is selected.
    */
    'checked'?: boolean;
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * If `true`, the user cannot interact with the radio.
    */
    'disabled'?: boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name'?: string;
    /**
    * Emitted when the radio button loses focus.
    */
    'onNeoBlur'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the radio button has focus.
    */
    'onNeoFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the radio button is selected.
    */
    'onNeoSelect'?: (event: CustomEvent<RadioChangeEventDetail>) => void;
    /**
    * the value of the radio.
    */
    'value'?: any | null;
  }
  interface NeoRadioGroup {
    /**
    * If `true`, the radios can be deselected.
    */
    'allowEmptySelection'?: boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name'?: string;
    /**
    * Emitted when the value has changed.
    */
    'onNeoChange'?: (event: CustomEvent<RadioGroupChangeEventDetail>) => void;
    /**
    * the value of the radio group.
    */
    'value'?: any | null;
  }
  interface NeoRow {}
  interface NeoSlide {}
  interface NeoSlides {
    'buttons'?: boolean;
    'options'?: any;
    'opts'?: any;
    'pager'?: boolean;
    'scrollbar'?: boolean;
  }
  interface NeoTab {
    /**
    * Status of the tab
    */
    'active'?: boolean;
    /**
    * Should be activatble
    */
    'disabled'?: boolean;
    /**
    * Label used for the tab button title
    */
    'tab': string;
  }
  interface NeoTabBar {
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * The selected tab component
    */
    'selectedTab'?: string;
  }
  interface NeoTabButton {
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * If `true`, the user cannot interact with the tab button.
    */
    'disabled'?: boolean;
    /**
    * The selected tab component
    */
    'selected'?: boolean;
    /**
    * A tab id must be provided for each `neo-tab`.
    */
    'tab'?: string;
  }
  interface NeoTabs {
    /**
    * Emitted when the navigation has finished transitioning to a new component.
    */
    'onNeoTabsDidChange'?: (event: CustomEvent<{ tab: string }>) => void;
    /**
    * Emitted when the navigation is about to transition to a new component.
    */
    'onNeoTabsWillChange'?: (event: CustomEvent<{ tab: string }>) => void;
  }
  interface NeoTextarea {
    /**
    * If `true`, the element height will increase based on the value.
    */
    'autoGrow'?: boolean;
    /**
    * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
    */
    'autocapitalize'?: string;
    /**
    * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
    */
    'autofocus'?: boolean;
    /**
    * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
    */
    'clearOnEdit'?: boolean;
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
    */
    'cols'?: number;
    /**
    * Set the amount of time, in milliseconds, to wait to trigger the `neoChange` event after each keystroke.
    */
    'debounce'?: number;
    /**
    * If `true`, the user cannot interact with the textarea.
    */
    'disabled'?: boolean;
    /**
    * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
    */
    'maxlength'?: number;
    /**
    * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
    */
    'minlength'?: number;
    /**
    * The mode determines which platform styles to use.
    */
    'mode'?: "ios" | "md";
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name'?: string;
    /**
    * Emitted when the input loses focus.
    */
    'onNeoBlur'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the input value has changed.
    */
    'onNeoChange'?: (event: CustomEvent<TextareaChangeEventDetail>) => void;
    /**
    * Emitted when the input has focus.
    */
    'onNeoFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when a keyboard input occurred.
    */
    'onNeoInput'?: (event: CustomEvent<KeyboardEvent>) => void;
    /**
    * Instructional text that shows before the input has a value.
    */
    'placeholder'?: string | null;
    /**
    * If `true`, the user cannot modify the value.
    */
    'readonly'?: boolean;
    /**
    * If `true`, the user must fill in a value before submitting a form.
    */
    'required'?: boolean;
    /**
    * If `true`, the element will be resizeable.
    */
    'resize'?: boolean;
    /**
    * The number of visible text lines for the control.
    */
    'rows'?: number;
    /**
    * If `true`, the element will have its spelling and grammar checked.
    */
    'spellcheck'?: boolean;
    /**
    * The value of the textarea.
    */
    'value'?: string | null;
    /**
    * Indicates how the control wraps text.
    */
    'wrap'?: 'hard' | 'soft' | 'off';
  }
  interface NeoVideo {
    /**
    * Show custom controls, this is not ready yet. Use native controls
    */
    'controls'?: boolean;
    /**
    * The poster image url
    */
    'poster'?: string;
    /**
    * The video URL.
    */
    'src'?: string;
  }
  interface NeoWysiwyg {
    /**
    * The first name
    */
    'base'?: number;
  }
  interface ScrubBar {
    'duration'?: number;
    'onSeekEnd'?: (event: CustomEvent<any>) => void;
    'onSeekMove'?: (event: CustomEvent<any>) => void;
    'onSeekStart'?: (event: CustomEvent<any>) => void;
    'progress'?: number;
  }

  interface IntrinsicElements {
    'neo-accordion': NeoAccordion;
    'neo-accordion-item': NeoAccordionItem;
    'neo-app': NeoApp;
    'neo-button': NeoButton;
    'neo-buttons': NeoButtons;
    'neo-card': NeoCard;
    'neo-card-content': NeoCardContent;
    'neo-card-header': NeoCardHeader;
    'neo-checkbox': NeoCheckbox;
    'neo-chip': NeoChip;
    'neo-col': NeoCol;
    'neo-copy': NeoCopy;
    'neo-eyebrow': NeoEyebrow;
    'neo-form-group': NeoFormGroup;
    'neo-gallery': NeoGallery;
    'neo-gallery-item': NeoGalleryItem;
    'neo-grid': NeoGrid;
    'neo-heading': NeoHeading;
    'neo-img': NeoImg;
    'neo-input': NeoInput;
    'neo-label': NeoLabel;
    'neo-link-list': NeoLinkList;
    'neo-link-list-item': NeoLinkListItem;
    'neo-masonry': NeoMasonry;
    'neo-masonry-item': NeoMasonryItem;
    'neo-profile': NeoProfile;
    'neo-radio': NeoRadio;
    'neo-radio-group': NeoRadioGroup;
    'neo-row': NeoRow;
    'neo-slide': NeoSlide;
    'neo-slides': NeoSlides;
    'neo-tab': NeoTab;
    'neo-tab-bar': NeoTabBar;
    'neo-tab-button': NeoTabButton;
    'neo-tabs': NeoTabs;
    'neo-textarea': NeoTextarea;
    'neo-video': NeoVideo;
    'neo-wysiwyg': NeoWysiwyg;
    'scrub-bar': ScrubBar;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'neo-accordion': LocalJSX.NeoAccordion & JSXBase.HTMLAttributes<HTMLNeoAccordionElement>;
      'neo-accordion-item': LocalJSX.NeoAccordionItem & JSXBase.HTMLAttributes<HTMLNeoAccordionItemElement>;
      'neo-app': LocalJSX.NeoApp & JSXBase.HTMLAttributes<HTMLNeoAppElement>;
      'neo-button': LocalJSX.NeoButton & JSXBase.HTMLAttributes<HTMLNeoButtonElement>;
      'neo-buttons': LocalJSX.NeoButtons & JSXBase.HTMLAttributes<HTMLNeoButtonsElement>;
      'neo-card': LocalJSX.NeoCard & JSXBase.HTMLAttributes<HTMLNeoCardElement>;
      'neo-card-content': LocalJSX.NeoCardContent & JSXBase.HTMLAttributes<HTMLNeoCardContentElement>;
      'neo-card-header': LocalJSX.NeoCardHeader & JSXBase.HTMLAttributes<HTMLNeoCardHeaderElement>;
      'neo-checkbox': LocalJSX.NeoCheckbox & JSXBase.HTMLAttributes<HTMLNeoCheckboxElement>;
      'neo-chip': LocalJSX.NeoChip & JSXBase.HTMLAttributes<HTMLNeoChipElement>;
      'neo-col': LocalJSX.NeoCol & JSXBase.HTMLAttributes<HTMLNeoColElement>;
      'neo-copy': LocalJSX.NeoCopy & JSXBase.HTMLAttributes<HTMLNeoCopyElement>;
      'neo-eyebrow': LocalJSX.NeoEyebrow & JSXBase.HTMLAttributes<HTMLNeoEyebrowElement>;
      'neo-form-group': LocalJSX.NeoFormGroup & JSXBase.HTMLAttributes<HTMLNeoFormGroupElement>;
      'neo-gallery': LocalJSX.NeoGallery & JSXBase.HTMLAttributes<HTMLNeoGalleryElement>;
      'neo-gallery-item': LocalJSX.NeoGalleryItem & JSXBase.HTMLAttributes<HTMLNeoGalleryItemElement>;
      'neo-grid': LocalJSX.NeoGrid & JSXBase.HTMLAttributes<HTMLNeoGridElement>;
      'neo-heading': LocalJSX.NeoHeading & JSXBase.HTMLAttributes<HTMLNeoHeadingElement>;
      'neo-img': LocalJSX.NeoImg & JSXBase.HTMLAttributes<HTMLNeoImgElement>;
      'neo-input': LocalJSX.NeoInput & JSXBase.HTMLAttributes<HTMLNeoInputElement>;
      'neo-label': LocalJSX.NeoLabel & JSXBase.HTMLAttributes<HTMLNeoLabelElement>;
      'neo-link-list': LocalJSX.NeoLinkList & JSXBase.HTMLAttributes<HTMLNeoLinkListElement>;
      'neo-link-list-item': LocalJSX.NeoLinkListItem & JSXBase.HTMLAttributes<HTMLNeoLinkListItemElement>;
      'neo-masonry': LocalJSX.NeoMasonry & JSXBase.HTMLAttributes<HTMLNeoMasonryElement>;
      'neo-masonry-item': LocalJSX.NeoMasonryItem & JSXBase.HTMLAttributes<HTMLNeoMasonryItemElement>;
      'neo-profile': LocalJSX.NeoProfile & JSXBase.HTMLAttributes<HTMLNeoProfileElement>;
      'neo-radio': LocalJSX.NeoRadio & JSXBase.HTMLAttributes<HTMLNeoRadioElement>;
      'neo-radio-group': LocalJSX.NeoRadioGroup & JSXBase.HTMLAttributes<HTMLNeoRadioGroupElement>;
      'neo-row': LocalJSX.NeoRow & JSXBase.HTMLAttributes<HTMLNeoRowElement>;
      'neo-slide': LocalJSX.NeoSlide & JSXBase.HTMLAttributes<HTMLNeoSlideElement>;
      'neo-slides': LocalJSX.NeoSlides & JSXBase.HTMLAttributes<HTMLNeoSlidesElement>;
      'neo-tab': LocalJSX.NeoTab & JSXBase.HTMLAttributes<HTMLNeoTabElement>;
      'neo-tab-bar': LocalJSX.NeoTabBar & JSXBase.HTMLAttributes<HTMLNeoTabBarElement>;
      'neo-tab-button': LocalJSX.NeoTabButton & JSXBase.HTMLAttributes<HTMLNeoTabButtonElement>;
      'neo-tabs': LocalJSX.NeoTabs & JSXBase.HTMLAttributes<HTMLNeoTabsElement>;
      'neo-textarea': LocalJSX.NeoTextarea & JSXBase.HTMLAttributes<HTMLNeoTextareaElement>;
      'neo-video': LocalJSX.NeoVideo & JSXBase.HTMLAttributes<HTMLNeoVideoElement>;
      'neo-wysiwyg': LocalJSX.NeoWysiwyg & JSXBase.HTMLAttributes<HTMLNeoWysiwygElement>;
      'scrub-bar': LocalJSX.ScrubBar & JSXBase.HTMLAttributes<HTMLScrubBarElement>;
    }
  }
}


